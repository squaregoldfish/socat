! masks_SOCAT_regions.jnl
! Define masks for original socat regions, based on the rectangle definitions 
! and the definition of the coastal region below.
!
! In SOCAT 2:
! * The North Atlantic and North Pacific region overlap with the
!     Arctic region.
! * All regions except for Arctic and Southern overlap with coast region.
!
! In SOCAT 1.5:
! * There was no Arctic region
! * All regions except for the Southern overlap with coast region.
!
! This script writes the SOCAT 2 mask on the grid of etopo5, lon in -180:180
! and lat in -90:90. 
!
! The masks should not include tests such as xx LE 180; these result in
! results of 0 right at 180 or -180.

! Set up
set memory /size=100

! variables based on etopo20
use etopo20.cdf

! Define new y axis with coordinates at -90 and 90 so that the SAMPLEXY_CLOSEST
! function will return values even if the data is very near the poles. The function
! doesn't return a value if the sample latitude is above the last coordinate location.

define axis/y=-90:90/npoints=541/units=degrees_north yfull
set var/name=rose_in rose
let rose = rose_in[gy=yfull@nrst]
set att/like=rose_in rose

! SOCAT regions, from the database requests
! 
! region_id corresponds to the following region names:
! 
! +-----------+-------------------+--------+
! | region_ID | name              | region |
! +-----------+-------------------+--------+
! | N         | North Pacific     |      1 |
! | T         | Tropical Pacific  |      2 |
! | O         | Southern Ocean    |      4 |
! | I         | Indian            |      5 |
! | A         | North Atlantic    |      6 |
! | C         | Coastal           |      7 |
! | Z         | Tropical Atlantic |      8 |
! | R         | Arctic            |     10 |
! +-----------+-------------------+--------+
! 
! 
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! +-----------+--------+--------+--------+--------+--------------+
! | A         |     30 |      0 |     90 |     20 |            1 |
! | A         |     30 |    -68 |     90 |      0 |            2 |
! | A         |      7 |    -84 |     90 |    -68 |            3 |
! | A         |     18 |   -100 |     90 |    -84 |            4 |
! | A         |     30 |     20 |     90 |     43 |            5 |
! | I         |    -30 |     20 |     30 |    100 |            6 |
! | I         |    -30 |    100 |     -5 |    130 |            7 |
! | I         |    -30 |    130 |    -30 |    147 |            8 |
! | T         |     -5 |    100 |     30 |    180 |            9 |
! | N         |     30 |    106 |     90 |    180 |           10 |
! | N         |     30 |   -180 |     90 |   -105 |           11 |
! | O         |    -90 |   -180 |    -30 |    180 |           12 |
! | T         |     -5 |   -180 |     30 |   -100 |           13 |
! | T         |    -30 |   -180 |     -5 |    -68 |           14 |
! | T         |     -5 |   -100 |      5 |    -68 |           15 |
! | T         |      5 |   -100 |     18 |    -84 |           16 |
! | T         |     -5 |    100 |     30 |    180 |           17 |
! | T         |    -30 |    130 |     -5 |    180 |           18 |
! | Z         |    -30 |      0 |     20 |     20 |           22 |
! | Z         |    -30 |    -68 |     30 |      0 |           21 |
! | R         |     70 |   -100 |     90 |     43 |           23 | 
! | R         |     66 |   -180 |     90 |   -100 |           24 | 
! | R         |     66 |     43 |     90 |    180 |           25 | 
! +-----------+--------+--------+--------+--------+--------------+
! 
!

LET xm180 = `-180 + xbox[gx=rose,i=1]`
LET xm180 = -180
let xx =   x[gx=rose[d=1],x=`xm180`:180] + 0*y[gy=rose[d=1]]
let yy = 0*x[gx=rose[d=1],x=`xm180`:180] + y[gy=rose[d=1]] 
LET zero = 0+0*rose[d=1,x=`xm180`:180]
LET oceanmask = if rose[d=1,x=`xm180`:180] LT 0 then 1

! The land/ocean data is more detailed than in dist2land_burke. 
! Small islands out in the ocean should not be marked as coastal but as ocean(?)
use  dist2land20_burke.nc
let dist2landrose = dist2land[g=rose[d=1]@nrst]

LET oceanmask = if dist2landrose[x=`xm180`:180] GT 0 then 1


! SOCAT regions are drawn for /X=-180:540 to ensure coverage
! if the Ferret region drawn changes.


! North Atlantic
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | A         |     30 |      0 |     90 |     20 |            1 |
! | A         |     30 |    -68 |     90 |      0 |            2 |
! | A         |      7 |    -84 |     90 |    -68 |            3 |
! | A         |     18 |   -100 |     90 |    -84 |            4 |
! | A         |     30 |     20 |     90 |     43 |            5 |
! north of 70 is Arctic


let nax1 = if xx gt 0 and xx le 20 then oceanmask else zero
let nay1 = if yy gt 30 then oceanmask else zero

let nax2 = if xx gt -68 and xx le 0 then oceanmask else zero
let nay2 = if yy gt 30 then oceanmask else zero

let nax3 = if xx gt -84 and xx le -68 then oceanmask else zero
let nay3 = if yy gt 7 then oceanmask else zero

let nax4 = if xx gt -100 and xx le -84 then oceanmask else zero
let nay4 = if yy gt 18 then oceanmask else zero

let nax5 = if xx gt 20 and xx le 43 then oceanmask else zero
let nay5 = if yy gt 30 then oceanmask else zero

let na1 = nax1*nay1
let na2 = nax2*nay2
let na3 = nax3*nay3
let na4 = nax4*nay4
let na5 = nax5*nay5
let na_all = oceanmask*(na1+na2+na3+na4+na5)

! The original defs didn't define the Arctic mask. Do that, and apply it to 
! North Atlantic, and below, to North Pacific.

! Arctic
! overrides any of the above SOCAT regions
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | R         |     70 |   -100 |     90 |     43 |           23 | 
! | R         |     66 |   -180 |     90 |   -100 |           24 | 
! | R         |     66 |     43 |     90 |    180 |           25 | 


let arcx1 = if xx gt -100 and xx le 43 then oceanmask else zero
let arcy1 = if yy gt 70 then oceanmask else zero
let arcx2 = if xx le -100 then oceanmask else zero
let arcy2 = if yy gt 66 then oceanmask else zero
let arcx3 = if xx gt 43 then oceanmask else zero
let arcy3 = if yy gt 66 then oceanmask else zero

let arc1 = arcx1*arcy1
let arc2 = arcx2*arcy2
let arc3 = arcx3*arcy3
let arc_all = oceanmask*(arc1+arc2+arc3)

let/title="Arctic Mask" arctic = if arc_all gt 0 then 10 else 0

let/title="North Atlantic Mask" natlantic = if na_all gt 0 and arc_all eq 0 then 6 else 0

! Indian
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | I         |    -30 |     20 |     30 |    100 |            6 |
! | I         |    -30 |    100 |     -5 |    130 |            7 |
! | I         |    -30 |    130 |    -30 |    147 |            8 |  

let indx1 = if xx gt 20 and xx le 100 then oceanmask else zero
let indy1 = if yy gt -30 and yy le 30 then oceanmask else zero

let indx2 = if xx gt 100 and xx le 130 then oceanmask else zero
let indy2 = if yy gt -30 and yy le -5 then oceanmask else zero

let indx3 = if xx gt 100 and xx le 130 then oceanmask else zero
let indy3 = if yy gt -30 and yy le -30 then oceanmask else zero
let ind1 = indx1*indy1
let ind2 = indx2*indy2
let ind3 = indx3*indy3
let ind_all = oceanmask*(ind1+ind2+ind3)
let/title="Indian Ocean Mask" Indian = if ind_all then 5 else 0


! North Pacific
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | N         |     30 |    106 |     90 |    180 |           10 |
! | N         |     30 |   -180 |     90 |   -105 |           11 |
! north of 66 is Arctic



let npacx1 = if xx gt 106 then oceanmask else zero
let npacy1 = if yy gt 30 then oceanmask else zero
let npacx2 = if xx le -105 then oceanmask else zero
let npacy2 = if yy gt 30 then oceanmask else zero

let npac1 = npacx1*npacy1
let npac2 = npacx2*npacy2
let npac_all = oceanmask*(npac1+npac2)

! Also apply Arctic to North Pacific mask
let/title="North Pacific Mask" npacific = (if npac_all gt 0 and arc_all eq 0 then 1 else 0)


! Tropical Pacific
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | T         |     -5 |   -180 |     30 |   -100 |           13 |
! | T         |    -30 |   -180 |     -5 |    -68 |           14 |
! | T         |     -5 |   -100 |      5 |    -68 |           15 |
! | T         |      5 |   -100 |     18 |    -84 |           16 |
! | T         |     -5 |    100 |     30 |    180 |           17 |
! | T         |    -30 |    130 |     -5 |    180 |           18 |

let tpacx1 = if xx le -100 then oceanmask else zero
let tpacy1 = if yy gt -5 and yy le 30 then oceanmask else zero

let tpacx2 = if xx le -68 then oceanmask else zero
let tpacy2 = if yy gt -30 and yy le -5 then oceanmask else zero

let tpacx3 = if xx gt -100 and xx le -68 then oceanmask else zero
let tpacy3 = if yy gt -5 and yy le 5 then oceanmask else zero

let tpacx4 = if xx gt -100 and xx le -84 then oceanmask else zero
let tpacy4 = if yy gt  5 and yy le 18 then oceanmask else zero

let tpacx5 = if xx gt 100 then oceanmask else zero
let tpacy5 = if yy gt -5 and yy le 30 then oceanmask else zero

let tpacx6 = if xx gt 130 then oceanmask else zero
let tpacy6 = if yy gt -30 and yy le -5 then oceanmask else zero

let tpac1 = tpacx1*tpacy1
let tpac2 = tpacx2*tpacy2
let tpac3 = tpacx3*tpacy3
let tpac4 = tpacx4*tpacy4
let tpac5 = tpacx5*tpacy5
let tpac6 = tpacx6*tpacy6
let tpac_all = oceanmask*(tpac1+tpac2+tpac3+tpac4+tpac5+tpac6)

let/title="Tropical Pacific Mask" tpacific = if tpac_all then 2 else 0


! Tropical Atlantic
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | Z         |    -30 |      0 |     20 |     20 |           22 |
! | Z         |    -30 |    -68 |     30 |      0 |           21 |

let tatlx1 = if xx gt 0 and xx le 20 then oceanmask else zero
let tatly1 = if yy gt -30 and yy le 20 then oceanmask else zero
let tatlx2 = if xx gt -68 and xx le 0 then oceanmask else zero
let tatly2 = if yy gt -30 and yy le 30 then oceanmask else zero

let tatl1 = tatlx1*tatly1
let tatl2 = tatlx2*tatly2
let tatl_all = oceanmask*(tatl1+tatl2)

let/title="Tropical Atlantic Mask" tatlantic = if tatl_all then 8 else 0


! Southern Ocean
! overrides any of the above SOCAT regions
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | O         |    -90 |   -180 |    -30 |    180 |           12 |


let southy1 = if yy gt -90 and yy le -30 then oceanmask else zero
let/title="Southern Ocean Mask" south = if southy1 then 4 else 0

! Arctic defined above with North Atlantic...


! Coastal regions - within 400 km of land
! overrides any of the above SOCAT regions
! Coastal is not used in the Arctic or Southern regions


let coast_s = if yy ge -30 then oceanmask else zero
let coast_n = if arctic eq 0 then oceanmask else 0

let coast_400 = IF  dist2landrose[x=`xm180`:180] gt 0 and dist2landrose[x=`xm180`:180] le 400 then oceanmask else zero
let coast_all = coast_n* coast_s * coast_400

! The value of the coast mask will be 7 but first its added to regions it overlaps. The
! final mask will be  -- if sum-of-masks gt 10 then 7
let/title="Coastal mask" coast = if coast_all then 12 else 0


! Check

shade/pal=ten_by_levels/lev=(1,11,1) npacific; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) tpacific; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) south; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) indian; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) natlantic; go land; pause

shade/pal=ten_by_levels/lev=(1,11,1) if coast then 7; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) tatlantic; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) arctic; go land; pause

! add all the masks; each is a numeric code else 0. 

let sum_mask = natlantic+Indian+npacific+tpacific+tatlantic+south+arctic+coast

let/title="All Masks:1=NPac,2=TPac,4=South,5=Ind,6=NAtl,7=Coast,8=Tatl,10=Arctic" region_id = if sum_mask gt 10 then 7 else sum_mask
shade/pal=ten_by_levels/lev=(1,11,1)/key=centerlab region_id

save/clobber/file=SOCAT_region_ids.nc region_id

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! A few locations may be near an island and so get marked as zero where they should
! be either coastal in mid-latitudes, or Southern or Arctic. Define coastal,
! Arctic and southern masks to not refer to land.

LET ones = 1+0*dist2landrose[x=`xm180`:180] 


! Arctic
! overrides any of the above SOCAT regions
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | R         |     70 |   -100 |     90 |     43 |           23 | 
! | R         |     66 |   -180 |     90 |   -100 |           24 | 
! | R         |     66 |     43 |     90 |    180 |           25 | 


let arcx1 = if xx gt -100 and xx le 43 then ones else zero
let arcy1 = if yy gt 70 then ones else zero
let arcx2 = if xx le -100 then ones else zero
let arcy2 = if yy gt 66 then ones else zero
let arcx3 = if xx gt 43 then ones else zero
let arcy3 = if yy gt 66 then ones else zero

let arc1 = arcx1*arcy1
let arc2 = arcx2*arcy2
let arc3 = arcx3*arcy3
let arc_all = ones*(arc1+arc2+arc3)

let/title="Arctic Mask" arctic = if arc_all gt 0 then 10 else 0

! Southern Ocean
! overrides any of the above SOCAT regions
! +-----------+--------+--------+--------+--------+--------------+
! | region_ID | MinLat | MinLon | MaxLat | MaxLon | subregion_ID |
! | O         |    -90 |   -180 |    -30 |    180 |           12 |


let southy1 = if yy gt -90 and yy le -30 then ones else zero
let/title="Southern Ocean Mask" south = if southy1 then 4 else 0

! Arctic defined above with North Atlantic...


! Coastal regions - within 400 km of land
! overrides any of the above SOCAT regions
! Coastal is not used in the Arctic or Southern regions


let coast_s = if yy ge -30 then ones else zero
let coast_n = if arctic eq 0 then ones else 0

let coast_400 = IF  ones[x=`xm180`:180] gt 0 and ones[x=`xm180`:180] le 400 then ones else zero
let coast_all = coast_n* coast_s * coast_400

! The value of the coast mask will be 7 but first its added to regions it overlaps. The
! final mask will be  -- if sum-of-masks gt 10 then 7
let/title="Coastal mask" coast = if coast_all then 12 else 0


! Check
set win/new; 

shade/pal=ten_by_levels/lev=(1,11,1) south; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) if coast then 7; go land; pause
shade/pal=ten_by_levels/lev=(1,11,1) arctic; go land; pause

! add all the masks; each is a numeric code else 0. 

let sum_mask = south+arctic+coast

let/title="No ocean/land, All Masks:4=South,7=Coast,10=Arctic" southern_coast_arctic = if sum_mask gt 10 then 7 else sum_mask
shade/pal=ten_by_levels/lev=(1,11,1)/key=centerlab southern_coast_arctic

save/append/file=SOCAT_region_ids.nc southern_coast_arctic


