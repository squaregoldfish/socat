! SOCAT_single_dsg.jnl
!
! Write single-trajectory DSG files from the SOCAT2 dataset. 
! Input file is the big DSG file containing all cruises written by ERDDAP from the database
! Output directory is the location of output files: one DSG file per cruise.

can mode ver

define symbol infile "/home/data/socat/SOCAT2_data_table_b900_f2d1_5213.nc"
define symbol infile "/home/data/socat/SOCAT2_data_table_b900_f2d1_5213_month_lon360.nc"

define symbol outdir /home/data/socat/dsg_files_badval


use "($infile)"

let ntraj = `rowsize,return=msize`

! Single-point axis for instance direction

def axis/e=1:1:1 traj1
let ee = _e[ge=traj1]

! Index limits for first trajectory
let n1 = 1
let n2 = `rowsize[m=1]`

! Original variable names. The variables we
! write will have these same names, and all
! attributes of original variables.

let nvars = ..nvars
let vxnames = ..varnames
let varnames = ysequence(vxnames)
save/file=names.nc/clobber varnames
can var varnames, vxnames

can dat/all
use names

! Each file will get all the global attributes

use "($infile)"
set att/out=all .
can mode upcase

! Rename the variables in the dataset, then will
! define variables to write using the original names

repeat/j=1:`nvars` (\
def sym jj = `j`; \
def sym vname `varnames[d=1,j=($jj)]`; \
set var/name=($vname)_1 ($vname) \
)

! Nominally define the output variables. This lets us
! set their output type in SOCAT_DSG_def_ivar.jnl

let fCO2_recomputed = 1
let pressure = 1
let pressure_ncep_slp = 1
let pressure_equilibrium = 1
let salinity = 1
let salinity_woa5 = 1
let temperature = 1
let temperature_equilibrium = 1
let longitude = 1
let latitude = 1
let depth = 1
let ETOPO2_depth = 1
let time = 1
let day_of_year = 1
let WOCE_flag = 1
let fCO2_source = 1
let data_id = 1

! Loop over all trajectories
! Write the variables each trajectory to a file, keeping
! original attributes.
! First write one-point axis with the instance variables
! Reset the attribute rowSize:sample_dimension to point to
! the dimension traj1.
! Then write the data for each trajectory on an
! appropriate length axis.

repeat/range=1:`ntraj`/name=q (\
 def sym mm = `q`; \
 let nx = `rowsize_1[m=($mm)]`; \
 let n2 = `n1+nx-1`; \
 def sym outfile = /($outdir)/cruise_`cruise_id_1[m=($mm)]`.nc; \
 repeat/j=1:8 (def sym jj = `j`; go SOCAT_DSG_def_evar); \
 define att/output rowSize.sample_dimension = "obs1"; \
 ; \
 save/quiet/clobber/file="($outfile)" \
qc_flag,cruise_expocode,cruise_id,cruise_name,vessel_name,pis,doi,rowsize;\
 def axis/quiet/x=1:`nx`:1 obs1;\
 repeat/j=9:`nvars` (def sym jj = `j`; go SOCAT_DSG_def_ivar); \
; \
let n1 = `n2+1`; \
sh sym outfile)
